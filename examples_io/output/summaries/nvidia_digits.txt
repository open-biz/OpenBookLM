**NVIDIA DIGITS Tutorial Summary**

**Introduction**

The NVIDIA DIGITS tutorial is a comprehensive guide to using the Deep Learning GPU Training System (DIGITS) for deep
    learning tasks. DIGITS is a wrapper for TensorFlow that provides a graphical web interface for engineers and data
    scientists to train and deploy deep neural networks (DNNs) for image classification, segmentation, object detection, and
    more.

**Chapter 1: Overview of DIGITS**

DIGITS is a powerful tool that simplifies common deep learning tasks such as managing data, designing and training
    neural networks on multi-GPU systems, monitoring performance in real-time with advanced visualizations, and selecting
    the best performing model from the results browser for deployment. DIGITS is completely interactive, allowing data
    scientists to focus on designing and training networks rather than programming and debugging.

**Chapter 2: Writing a DIGITS Plugin**

DIGITS supports ingesting data from a limited number of data sources, including image file formats. However, users can
    extend DIGITS to ingest data from custom sources using data plugins. Visualization plugins can also be used to visualize
    the output of non-standard models. This chapter walks through the process of adding a custom plugin to DIGITS.

**2.1: Reading Data from DICOM Files**

In this example, we will implement a data plugin for image segmentation that reads images from DICOM files and their
    ground-truth from text files. This plugin is referred to as the Sunnybrook plugin, from the name of the corresponding
    dataset. The full code is available here.

**2.1.1: Data Plugin File Tree**

Below is an example file tree for a data plugin:

* `sunnybook/`         + `digits Data Plugin Sunnybrook/`                 - `templates/`                         -
    `dataset_template.html`                         - `inference_template.html`                 - `__init__.py`
    - `data.py`                 - `forms.py`         + `MANIFEST.in`         + `setup.py`

**2.1.1.1: setup.py**

The `setup.py` file specifies how to install the plugin. The main section of interest here is the invocation of the
    `setup` command from the `setuptools` package: ```python setup(     name="digits_sunnybrook_data_plugin",
    version="0.0.1",     author="Greg Heinrich",     description=("A data ingestion plugin for the Sunnybrook cardiac
    dataset"),     long_description=read('README'),     license="Apache",     packages=find_packages(),     entry_points={
    DIGITS_PLUGIN_GROUP: [ 'class=digits Data Plugin Sunnybrook:Data Ingestion', ]     },     include_package_data=True,
    install_requires=['pydicom'], ) ``` **2.1.1.2: MANIFEST.in**

The `MANIFEST.in` file specifies the resource files to include in the plugin package. In this sample, we are recursively
    including all `.html` files within the `digits Data Plugin Sunnybrook` folder.

**2.1.1.3: init.py**

The `digits Data Plugin Sunnybrook/init.py` file indicates that the `digits Data Plugin Sunnybrook` folder is a Python
    package. In most cases, the `digits Data Plugin Sunnybrook` folder can be left empty.

**2.1.1.4: data.py**

The `digits Data Plugin Sunnybrook/data.py` file implements a `Data Ingestion` class, which implements a DIGITS data
    extension database (interface.py). Ensure you review the interface API and its docstrings.

**2.1.1.5: form.py**

The `digits Data Plugin Sunnybrook/form.py` file is where we define: the `Dataset Form` class to use to specify a
    dataset, and optionally, the `Inference Form` class to specify inference data.

**2.1.1.6: dataset_template.py**

The `digits Data Plugin Sunnybrook/templates/dataset_template.py` file is a Jinja template that defines what you will
    see in the Web user interface.

**2.1.1.7: inference_template.py**

The `digits Data Plugin Sunnybrook/templates/inference_template.py` file is the Jinja template to show inference data
    options.

**2.1.2: Installing the Plugin**

To install the plugin, you need to run the following command from the directory that includes your data plugin
    `setup.py` file: ```bash $ pip install . ``` Next, restart DIGITS for the changes to take effect. Your plugin is
    installed.

**Chapter 3: Troubleshooting**

For the latest Release Notes, see the DIGITS Release Notes Documentation website. For more information about DIGITS,
    see: DIGITS website, DIGITS 6.0 project, and Git Hub documentation.

**Disclaimer**

This document is provided for information purposes only and shall not be regarded as a warranty of a certain
    functionality, condition, or quality of a product. NVIDIA Corporation (“NVIDIA”) makes no representations or warranties,
    expressed or implied, as to the accuracy or completeness of the information contained in this document and assumes no
    responsibility for any errors contained herein.

**Trademarks**

NVIDIA, the NVIDIA logo, and cu BLAS, CUDA, cu DNN, DALI, DIGITS, DGX, DGX-1, DGX-2, DGX Station, DLProf, Jetson,
    Kepler, Maxwell, NCCL, Nsight Compute, Nsight Systems, Nv Caffe, Perf Works, Pascal, SDK Manager, Tegra, Tensor RT,
    Triton Inference Server, Tesla, TF-TRT, and Volta are trademarks and/or registered trademarks of NVIDIA Corporation in
    the U.S. and other countries.

**Copyright**

Copyright 2017-2021 NVIDIA Corporation & affiliates. All rights reserved.

**Conclusion**

The NVIDIA DIGITS tutorial provides a comprehensive guide to using the Deep Learning GPU Training System (DIGITS) for
    deep learning tasks. DIGITS is a powerful tool that simplifies common deep learning tasks such as managing data,
    designing and training neural networks on multi-GPU systems, monitoring performance in real-time with advanced
    visualizations, and selecting the best performing model from the results browser for deployment. This summary provides a
    detailed overview of the tutorial, including the process of writing a custom plugin for DIGITS.